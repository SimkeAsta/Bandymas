{"version":3,"sources":["logo.svg","serviceWorker.js","components/Navigation/navigation.js","components/Products/ProductComponent.js","components/Products/ProductList.js","components/Products/ProductListContainer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Navigation","props","className","id","to","type","placeholder","aria-label","aria-describedby","styles","card","width","image","height","ProductComponent","style","src","this","productImage","alt","productTitle","productDescription","productPrice","onClick","onDetailsClick","Component","ProductList","product","products","map","productId","key","event","ProductListContainer","handleDetailsClick","console","log","preventDefault","history","push","state","axios","get","then","response","setState","data","catch","error","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,4KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCUSC,EAzBE,SAACC,GACd,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,iDACX,yBAAKA,UAAU,2BAA2BC,GAAG,0BACzC,wBAAID,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAME,GAAG,IAAIF,UAAU,YAAvB,aAEJ,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAME,GAAG,SAASF,UAAU,YAA5B,UAEJ,0BAAMA,UAAU,eACZ,2BAAOG,KAAK,OAAOH,UAAU,eAAeI,YAAY,WAAWC,aAAW,WAAWC,mBAAiB,mBAGlH,kBAAC,IAAD,CAAMJ,GAAG,SACL,4BAASC,KAAK,SAASH,UAAU,iBAAgB,uBAAGA,UAAU,qBAA9D,mB,wCChBlBO,EAAS,CACXC,KAAM,CAAEC,MAAO,SACfC,MAAO,CAAEC,OAAQ,UA4BNC,E,iLAvBP,OACI,yBAAKZ,UAAU,OAAOa,MAAON,EAAOC,MAChC,yBAAKM,IAAKC,KAAKhB,MAAMiB,aAAchB,UAAU,eAAeiB,IAAKF,KAAKhB,MAAMmB,aAAcL,MAAON,EAAOG,QACxG,yBAAKV,UAAU,aACX,wBAAIA,UAAU,cAAce,KAAKhB,MAAMmB,cACvC,uBAAGlB,UAAU,aAAae,KAAKhB,MAAMoB,oBACrC,uBAAGnB,UAAU,aAAae,KAAKhB,MAAMqB,aAArC,QACA,kBAAC,IAAD,CAAMlB,GAAE,oBAAea,KAAKhB,MAAMmB,eAAgB,4BAAQlB,UAAU,kBAAkBqB,QAASN,KAAKhB,MAAMuB,gBAAxD,kB,GATvCC,aCkBhBC,EAvBG,SAACzB,GACf,IAAI0B,EAAU1B,EAAM2B,SAASC,KAAI,SAACF,EAASG,GAEvC,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLA,UAAWH,EAAQG,UACnBZ,aAAcS,EAAQT,aACtBE,aAAcO,EAAQP,aACtBC,mBAAoBM,EAAQN,mBAC5BC,aAAcK,EAAQL,aACtBE,eAAgB,SAACQ,GAAD,OAAW/B,EAAMuB,eAAeQ,EAAOL,EAAQP,oBAI3E,OAAQ,yBAAKlB,UAAU,OAAOyB,I,iBCuBnBM,E,YArCX,WAAYhC,GAAQ,IAAD,8BACf,4CAAMA,KAeViC,mBAAqB,SAACF,EAAOZ,GACzBe,QAAQC,IAAIhB,GACZY,EAAMK,iBACN,EAAKpC,MAAMqC,QAAQC,KAAK,aAAenB,IAjBvC,EAAKoB,MAAQ,CAAEZ,SAAU,IAFV,E,iFAKE,IAAD,OAChBa,IAAMC,IAAI,sCACLC,MAAK,SAACC,GACHT,QAAQC,IAAIQ,GACZ,EAAKC,SAAS,CAAEjB,SAAUgB,EAASE,UAEtCC,OAAM,SAACC,GACJb,QAAQC,IAAIY,Q,+BAYpB,OACI,yBAAK9C,UAAU,aACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CACI0B,SAAUX,KAAKuB,MAAMZ,SACrBJ,eAAgBP,KAAKiB,2B,GA9BVT,aCOnCwB,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,KAOnCqB,SAASC,eAAe,SL8GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.ca59acb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nvar Navigation = (props) => {\n    return (\n        <div className=\"container\">\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to=\"/\" className=\"nav-link\">Products</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/admin\" className=\"nav-link\">Admin</Link>\n                        </li>\n                        <form className=\"form-inline\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" />\n                        </form>\n                    </ul>\n                    <Link to=\"/cart\">\n                        < button type=\"button\" className=\"btn btn-light\"><i className=\"fas fa-cart-plus\" />Cart items</button>\n                    </Link>\n                </div>\n            </nav>\n        </div >\n    );\n}\n\nexport default Navigation;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst styles = {\n    card: { width: '18rem' },\n    image: { height: '200px' }\n}\n\nclass ProductComponent extends Component {\n    render() {\n        return (\n            <div className=\"card\" style={styles.card} >\n                <img src={this.props.productImage} className=\"card-img-top\" alt={this.props.productTitle} style={styles.image} />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{this.props.productTitle}</h5>\n                    <p className=\"card-text\">{this.props.productDescription}</p>\n                    <p className=\"card-text\">{this.props.productPrice} Eur</p>\n                    <Link to={`/products/${this.props.productTitle}`}><button className=\"btn btn-warning\" onClick={this.props.onDetailsClick}>Details</button></Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nProductComponent.propTypes = {\n    productId: PropTypes.number.isRequired,\n    productTitle: PropTypes.string.isRequired,\n    productImage: PropTypes.string,\n    productDescription: PropTypes.string,\n    productPrice: PropTypes.number.isRequired,\n    onDetailsClick: PropTypes.func.isRequired\n}\n\nexport default ProductComponent;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProductComponent from './ProductComponent';\n\nvar ProductList = (props) => {\n    var product = props.products.map((product, productId) => {\n        // console.log(product.id)\n        return (\n            <ProductComponent\n                key={productId}\n                productId={product.productId}\n                productImage={product.productImage}\n                productTitle={product.productTitle}\n                productDescription={product.productDescription}\n                productPrice={product.productPrice}\n                onDetailsClick={(event) => props.onDetailsClick(event, product.productTitle)}\n            />\n        );\n    });\n    return (<div className=\"row\">{product}</div>);\n};\n\nProductList.propTypes = {\n    products: PropTypes.array.isRequired,\n    onDetailsClick: PropTypes.func.isRequired,\n};\n\nexport default ProductList;\n","import React, { Component } from 'react';\nimport ProductList from './ProductList';\nimport axios from 'axios';\n\nclass ProductListContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { products: [] };\n    }\n\n    componentDidMount() {\n        axios.get(\"http://localhost:8080/api/products\")\n            .then((response) => {\n                console.log(response)\n                this.setState({ products: response.data });\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n\n    handleDetailsClick = (event, productTitle) => {\n        console.log(productTitle)\n        event.preventDefault();\n        this.props.history.push(`/products/` + productTitle); // gal ir cia details pagal title turetu rodyt, o ne pagal id?\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <ProductList\n                        products={this.state.products}\n                        onDetailsClick={this.handleDetailsClick}\n                    />\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default ProductListContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Switch, Redirect, Route } from 'react-router';\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport Navigation from './components/Navigation/navigation';\nimport ProductListContainer from './components/Products/ProductListContainer';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Navigation />\n        <Route exact path=\"/\" component={ProductListContainer} />\n        {/* <Route exact path=\"/products/:id\" component={ProductDetails} />\n        <Route exact path=\"/admin/\" component={ProductListContainerAdmin} />\n        <Route exact path=\"/admin/add\" component={ProductAdminDetailsContainer} />\n        <Route exact path=\"/products/cart-products/:id\" component={CartContainer} />\n        <Route exact path=\"/admin\" component={ProductAdministrationList} /> */}\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}